Задача: Пошук книг з Open Library API
Твоє завдання - створити невеликий додаток для пошуку книг за допомогою Open Library API. Додаток повинен дозволяти користувачам вводити ключові слова для пошуку книг і відображати результати на сторінці. Використовуй методи і підходи, схожі на ті, що використовувалися в попередніх задачах.

Основні вимоги:
Створи репозиторій:

Назви репозиторій, наприклад, book-search-app.
Збери проєкт за допомогою Vite.
Використовуй Open Library API для пошуку книг:

API документація: Open Library API
Приклад запиту: https://openlibrary.org/search.json?q=harry+potter&page=1&limit=10
Запит має враховувати параметри:

q - ключові слова для пошуку.
page - номер сторінки.
limit - кількість книг на сторінці (встанови, наприклад, на 10).
Пагінація:

Початкове значення параметра page повинно бути 1.
З кожним наступним запитом цей параметр повинен збільшуватися на 1.
У разі нового пошуку значення page потрібно повернути до 1.
Інтерфейс:

Створити форму з полем введення для ключових слів та кнопкою Search.
Відображати результати пошуку в списку на сторінці.
Додати кнопку Load More під результатами, яка завантажує наступну сторінку результатів.
Якщо нових результатів немає, кнопка Load More повинна ховатися і з'являтися відповідне повідомлення.
Створити лоадер, який буде відображатися під час завантаження даних.
Робота з результатами:

Якщо користувач не ввів нічого в поле пошуку і натиснув кнопку Search, показати повідомлення про необхідність введення даних.
Якщо за запитом нічого не знайдено, вивести відповідне повідомлення.
Модульна організація коду:

У файлі openlibrary-api.js зберігати функції для HTTP-запитів.
У файлі render-functions.js створити функції для відображення елементів інтерфейсу.
У файлі main.js написати всю логіку роботи додатка.
Завершення роботи:

Проєкт зібрати за допомогою Vite.
Переконатися, що консоль не містить помилок або попереджень.
Здати домашнє завдання на перевірку з посиланням на вихідні файли і робочу сторінку на GitHub Pages.
Підказки:
Використовуй бібліотеку axios для роботи з HTTP-запитами.
Використовуй async/await для роботи з асинхронними операціями.
Не забудь про обробку помилок і повідомлення користувачеві у випадку, якщо щось пішло не так.
Приклад функціоналу:
Користувач вводить запит, наприклад "Harry Potter", натискає "Search", і додаток показує список книг з можливістю завантажити більше результатів.
Після натискання "Load More" завантажуються наступні результати.
Якщо більше результатів немає, кнопка зникає і показується повідомлення "End of results".
Ця задача допоможе тобі краще зрозуміти роботу з API, асинхронними запитами, пагінацією, та інтерфейсними елементами. Успіхів у розв'язанні! Якщо виникнуть питання, завжди можеш звертатися за допомогою.






